// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using snsrCollector.dbTables;

namespace snsrCollector.Migrations
{
    [DbContext(typeof(snsrContext))]
    partial class snsrContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("snsrCollector.dbTables.Device", b =>
                {
                    b.Property<string>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("character varying");

                    b.Property<int>("DeviceType")
                        .HasColumnName("device_type")
                        .HasColumnType("integer");

                    b.Property<string>("MainLogicalDevice")
                        .HasColumnName("main_logical_device")
                        .HasColumnType("character varying");

                    b.Property<string>("ModelFkey")
                        .IsRequired()
                        .HasColumnName("model_fkey")
                        .HasColumnType("character varying");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnName("serial_number")
                        .HasColumnType("character varying");

                    b.HasKey("IdKey")
                        .HasName("device_pkey");

                    b.HasIndex("DeviceType");

                    b.HasIndex("MainLogicalDevice");

                    b.HasIndex("ModelFkey");

                    b.ToTable("device");

                    b.HasComment("Прибор - экземпляр модели, представляющий и отображающий настоящий где-либо расположенный прибор в реальной жизни");
                });

            modelBuilder.Entity("snsrCollector.dbTables.DeviceLogical", b =>
                {
                    b.Property<string>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("character varying");

                    b.Property<string>("DeviceFkey")
                        .IsRequired()
                        .HasColumnName("device_fkey")
                        .HasColumnType("character varying");

                    b.Property<string>("ModelLogicalDevice")
                        .IsRequired()
                        .HasColumnName("model_logical_device")
                        .HasColumnType("character varying");

                    b.HasKey("IdKey")
                        .HasName("device_logical_pkey");

                    b.HasIndex("DeviceFkey");

                    b.HasIndex("ModelLogicalDevice");

                    b.ToTable("device_logical");

                    b.HasComment("device_logical - связь логического прибора созданного экземпляра с тем прибором, что есть в модели, по которой создано отображение физического прибора.");
                });

            modelBuilder.Entity("snsrCollector.dbTables.DeviceObject", b =>
                {
                    b.Property<string>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("character varying");

                    b.Property<string>("DeviceLdFkey")
                        .IsRequired()
                        .HasColumnName("device_ld_fkey")
                        .HasColumnType("character varying");

                    b.Property<string>("DeviceProfileFkey")
                        .HasColumnName("device_profile_fkey")
                        .HasColumnType("character varying");

                    b.Property<string>("ModelObjectFkey")
                        .IsRequired()
                        .HasColumnName("model_object_fkey")
                        .HasColumnType("character varying");

                    b.Property<int>("ObjectDictId")
                        .HasColumnName("object_dict_id")
                        .HasColumnType("integer");

                    b.Property<string>("StartValue")
                        .HasColumnName("start_value")
                        .HasColumnType("character varying");

                    b.HasKey("IdKey")
                        .HasName("device_object_pkey");

                    b.HasIndex("DeviceLdFkey");

                    b.HasIndex("DeviceProfileFkey");

                    b.HasIndex("ModelObjectFkey");

                    b.HasIndex("ObjectDictId");

                    b.ToTable("device_object");

                    b.HasComment("device_object - связь объекта созданного экземпляра прибора с тем, что в модели");
                });

            modelBuilder.Entity("snsrCollector.dbTables.DeviceObjectValue", b =>
                {
                    b.Property<string>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("character varying");

                    b.Property<string>("DeviceObjectFkey")
                        .IsRequired()
                        .HasColumnName("device_object_fkey")
                        .HasColumnType("character varying");

                    b.Property<string>("ObjectValue")
                        .IsRequired()
                        .HasColumnName("object_value")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("ReceiveTime")
                        .HasColumnName("receive_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("IdKey")
                        .HasName("device_object_value_pkey");

                    b.HasIndex("DeviceObjectFkey");

                    b.ToTable("device_object_value");

                    b.HasComment("device_object_value - значение объекта в устройстве. Например, значение температуры.");
                });

            modelBuilder.Entity("snsrCollector.dbTables.DeviceProfile", b =>
                {
                    b.Property<string>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("character varying");

                    b.Property<string>("DeviceLdFkey")
                        .IsRequired()
                        .HasColumnName("device_ld_fkey")
                        .HasColumnType("character varying");

                    b.Property<string>("ModelProfileFkey")
                        .IsRequired()
                        .HasColumnName("model_profile_fkey")
                        .HasColumnType("character varying");

                    b.HasKey("IdKey")
                        .HasName("device_profile_pkey");

                    b.HasIndex("DeviceLdFkey");

                    b.HasIndex("ModelProfileFkey");

                    b.ToTable("device_profile");

                    b.HasComment("device_profile - связь профиля созданного экземпляра модели прибора.");
                });

            modelBuilder.Entity("snsrCollector.dbTables.Model", b =>
                {
                    b.Property<string>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("character varying");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("model_name")
                        .HasColumnType("character varying")
                        .HasDefaultValueSql("'UNKNOWN'::character varying");

                    b.Property<int>("ModelTypeFkey")
                        .HasColumnName("model_type_fkey")
                        .HasColumnType("integer");

                    b.HasKey("IdKey")
                        .HasName("model_pkey");

                    b.HasIndex("ModelTypeFkey");

                    b.ToTable("model");

                    b.HasComment("Модель прибора - описание, чертёж прибора. Ближайшее сравнение - классы в ООП. По их лекалу будут создаваться экземпляры, соответствующие физическим приборам, расположенным в реальном мире.");
                });

            modelBuilder.Entity("snsrCollector.dbTables.ModelLogicalDevice", b =>
                {
                    b.Property<string>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("character varying");

                    b.Property<int>("LdType")
                        .HasColumnName("ld_type")
                        .HasColumnType("integer");

                    b.Property<string>("ModelFkey")
                        .IsRequired()
                        .HasColumnName("model_fkey")
                        .HasColumnType("character varying");

                    b.HasKey("IdKey")
                        .HasName("model_logical_device_pkey");

                    b.HasIndex("LdType");

                    b.HasIndex("ModelFkey");

                    b.ToTable("model_logical_device");

                    b.HasComment("Логический прибор - слой в модели, который содержит в себе профили и объекты. Необходим для идентификации объектов, к примеру, если в приборе есть два микроконтроллера, измеряющие температуру, для идентификации используются разные логические приборы. Будет создано 2 логических прибора, в каждом по объекту \"Температура\"");
                });

            modelBuilder.Entity("snsrCollector.dbTables.ModelLogicalDeviceObject", b =>
                {
                    b.Property<string>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsEditable")
                        .HasColumnName("is_editable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInitable")
                        .HasColumnName("is_initable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShown")
                        .HasColumnName("is_shown")
                        .HasColumnType("boolean");

                    b.Property<string>("ModelLdFkey")
                        .IsRequired()
                        .HasColumnName("model_ld_fkey")
                        .HasColumnType("character varying");

                    b.Property<string>("ModelProfileFkey")
                        .HasColumnName("model_profile_fkey")
                        .HasColumnType("character varying");

                    b.Property<int>("ObjectId")
                        .HasColumnName("object_id")
                        .HasColumnType("integer");

                    b.HasKey("IdKey")
                        .HasName("model_logical_device_object_pkey");

                    b.HasIndex("ModelLdFkey");

                    b.HasIndex("ModelProfileFkey");

                    b.HasIndex("ObjectId");

                    b.ToTable("model_logical_device_object");

                    b.HasComment("Объекты логического прибора - ссылки, связывающие профили и логические приборы с словарём объектов");
                });

            modelBuilder.Entity("snsrCollector.dbTables.ModelLogicalType", b =>
                {
                    b.Property<int>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("integer");

                    b.Property<string>("LdTypeName")
                        .IsRequired()
                        .HasColumnName("ld_type_name")
                        .HasColumnType("character varying");

                    b.HasKey("IdKey")
                        .HasName("model_logical_type_pkey");

                    b.ToTable("model_logical_type");

                    b.HasComment("Тип логического прибора - словарь с перечислением типов логических приборов.");
                });

            modelBuilder.Entity("snsrCollector.dbTables.ModelProfile", b =>
                {
                    b.Property<string>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("character varying");

                    b.Property<string>("ModelLdFkey")
                        .IsRequired()
                        .HasColumnName("model_ld_fkey")
                        .HasColumnType("character varying");

                    b.Property<int>("ProfileType")
                        .HasColumnName("profile_type")
                        .HasColumnType("integer");

                    b.HasKey("IdKey")
                        .HasName("model_profile_pkey");

                    b.HasIndex("ModelLdFkey");

                    b.HasIndex("ProfileType");

                    b.ToTable("model_profile");

                    b.HasComment("Профиль содержит информацию для коммуникации с прибором.");
                });

            modelBuilder.Entity("snsrCollector.dbTables.ModelType", b =>
                {
                    b.Property<int>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("integer");

                    b.Property<string>("ModelTypeName")
                        .IsRequired()
                        .HasColumnName("model_type_name")
                        .HasColumnType("character varying");

                    b.HasKey("IdKey")
                        .HasName("model_type_pkey");

                    b.ToTable("model_type");

                    b.HasComment("Тип модели - словарь с перечислением типов.");
                });

            modelBuilder.Entity("snsrCollector.dbTables.Network", b =>
                {
                    b.Property<int>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("integer");

                    b.Property<string>("ChildDeviceId")
                        .IsRequired()
                        .HasColumnName("child_device_id")
                        .HasColumnType("character varying");

                    b.Property<string>("ParentDeviceId")
                        .IsRequired()
                        .HasColumnName("parent_device_id")
                        .HasColumnType("character varying");

                    b.HasKey("IdKey")
                        .HasName("network_pkey");

                    b.HasIndex("ChildDeviceId");

                    b.HasIndex("ParentDeviceId");

                    b.ToTable("network");

                    b.HasComment("network - сеть, граф, для того, чтобы в системе понимать связь между приборами.");
                });

            modelBuilder.Entity("snsrCollector.dbTables.ObjectDict", b =>
                {
                    b.Property<int>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("integer");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnName("object_name")
                        .HasColumnType("character varying");

                    b.Property<int>("ObjectType")
                        .HasColumnName("object_type")
                        .HasColumnType("integer");

                    b.HasKey("IdKey")
                        .HasName("object_type_pkey");

                    b.HasIndex("ObjectType");

                    b.ToTable("object_dict");

                    b.HasComment("Словарь объектов - перечисление объектов, которые могут содержаться в приборах. Например, температура, серийный номер, ip адрес.");
                });

            modelBuilder.Entity("snsrCollector.dbTables.ObjectTypeDict", b =>
                {
                    b.Property<int>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("integer");

                    b.Property<string>("ObjectTypeName")
                        .IsRequired()
                        .HasColumnName("object_type_name")
                        .HasColumnType("character varying");

                    b.HasKey("IdKey")
                        .HasName("object_dict_pkey");

                    b.ToTable("object_type_dict");

                    b.HasComment(@"Словарь типов объектов - перечисление типов (Число, коммуникационный объект, строка, т.д.)
");
                });

            modelBuilder.Entity("snsrCollector.dbTables.ProfileNetwork", b =>
                {
                    b.Property<string>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("character varying");

                    b.Property<string>("ChildProfileId")
                        .IsRequired()
                        .HasColumnName("child_profile_id")
                        .HasColumnType("character varying");

                    b.Property<string>("ParentProfileId")
                        .HasColumnName("parent_profile_id")
                        .HasColumnType("character varying");

                    b.HasKey("IdKey")
                        .HasName("primary");

                    b.HasIndex("ChildProfileId");

                    b.HasIndex("ParentProfileId");

                    b.ToTable("profile_network");
                });

            modelBuilder.Entity("snsrCollector.dbTables.ProfileType", b =>
                {
                    b.Property<int>("IdKey")
                        .HasColumnName("id_key")
                        .HasColumnType("integer");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnName("type_name")
                        .HasColumnType("character varying");

                    b.HasKey("IdKey")
                        .HasName("profile_type_pkey");

                    b.ToTable("profile_type");
                });

            modelBuilder.Entity("snsrCollector.dbTables.Device", b =>
                {
                    b.HasOne("snsrCollector.dbTables.ModelType", "DeviceTypeNavigation")
                        .WithMany("Device")
                        .HasForeignKey("DeviceType")
                        .HasConstraintName("device_Device_type_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("snsrCollector.dbTables.DeviceLogical", "MainLogicalDeviceNavigation")
                        .WithMany("Device")
                        .HasForeignKey("MainLogicalDevice")
                        .HasConstraintName("device_Main_logical_device_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("snsrCollector.dbTables.Model", "ModelFkeyNavigation")
                        .WithMany("Device")
                        .HasForeignKey("ModelFkey")
                        .HasConstraintName("device_Model_fkey_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("snsrCollector.dbTables.DeviceLogical", b =>
                {
                    b.HasOne("snsrCollector.dbTables.Device", "DeviceFkeyNavigation")
                        .WithMany("DeviceLogical")
                        .HasForeignKey("DeviceFkey")
                        .HasConstraintName("device_logical_Device_fkey_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("snsrCollector.dbTables.ModelLogicalDevice", "ModelLogicalDeviceNavigation")
                        .WithMany("DeviceLogical")
                        .HasForeignKey("ModelLogicalDevice")
                        .HasConstraintName("device_logical_Model_logical_device_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("snsrCollector.dbTables.DeviceObject", b =>
                {
                    b.HasOne("snsrCollector.dbTables.DeviceLogical", "DeviceLdFkeyNavigation")
                        .WithMany("DeviceObject")
                        .HasForeignKey("DeviceLdFkey")
                        .HasConstraintName("device_object_Device_ld_fkey_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("snsrCollector.dbTables.DeviceProfile", "DeviceProfileFkeyNavigation")
                        .WithMany("DeviceObject")
                        .HasForeignKey("DeviceProfileFkey")
                        .HasConstraintName("device_object_Device_profile_fkey_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("snsrCollector.dbTables.ModelLogicalDeviceObject", "ModelObjectFkeyNavigation")
                        .WithMany("DeviceObject")
                        .HasForeignKey("ModelObjectFkey")
                        .HasConstraintName("device_object_Model_object_fkey_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("snsrCollector.dbTables.ObjectDict", "ObjectDict")
                        .WithMany("DeviceObject")
                        .HasForeignKey("ObjectDictId")
                        .HasConstraintName("device_object_Object_dict_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("snsrCollector.dbTables.DeviceObjectValue", b =>
                {
                    b.HasOne("snsrCollector.dbTables.DeviceObject", "DeviceObjectFkeyNavigation")
                        .WithMany("DeviceObjectValue")
                        .HasForeignKey("DeviceObjectFkey")
                        .HasConstraintName("device_object_value_Device_object_fkey_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("snsrCollector.dbTables.DeviceProfile", b =>
                {
                    b.HasOne("snsrCollector.dbTables.DeviceLogical", "DeviceLdFkeyNavigation")
                        .WithMany("DeviceProfile")
                        .HasForeignKey("DeviceLdFkey")
                        .HasConstraintName("device_profile_Device_ld_fkey_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("snsrCollector.dbTables.ModelProfile", "ModelProfileFkeyNavigation")
                        .WithMany("DeviceProfile")
                        .HasForeignKey("ModelProfileFkey")
                        .HasConstraintName("device_profile_Model_profile_fkey_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("snsrCollector.dbTables.Model", b =>
                {
                    b.HasOne("snsrCollector.dbTables.ModelType", "ModelTypeFkeyNavigation")
                        .WithMany("Model")
                        .HasForeignKey("ModelTypeFkey")
                        .HasConstraintName("model_Model_type_fkey_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("snsrCollector.dbTables.ModelLogicalDevice", b =>
                {
                    b.HasOne("snsrCollector.dbTables.ModelLogicalType", "LdTypeNavigation")
                        .WithMany("ModelLogicalDevice")
                        .HasForeignKey("LdType")
                        .HasConstraintName("model_logical_device_Ld_type_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("snsrCollector.dbTables.Model", "ModelFkeyNavigation")
                        .WithMany("ModelLogicalDevice")
                        .HasForeignKey("ModelFkey")
                        .HasConstraintName("model_logical_device_Model_fkey_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("snsrCollector.dbTables.ModelLogicalDeviceObject", b =>
                {
                    b.HasOne("snsrCollector.dbTables.ModelLogicalDevice", "ModelLdFkeyNavigation")
                        .WithMany("ModelLogicalDeviceObject")
                        .HasForeignKey("ModelLdFkey")
                        .HasConstraintName("model_logical_device_object_Model_ld_fkey_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("snsrCollector.dbTables.ModelProfile", "ModelProfileFkeyNavigation")
                        .WithMany("ModelLogicalDeviceObject")
                        .HasForeignKey("ModelProfileFkey")
                        .HasConstraintName("model_logical_device_object_Model_profile_fkey_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("snsrCollector.dbTables.ObjectDict", "Object")
                        .WithMany("ModelLogicalDeviceObject")
                        .HasForeignKey("ObjectId")
                        .HasConstraintName("model_logical_device_object_Object_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("snsrCollector.dbTables.ModelProfile", b =>
                {
                    b.HasOne("snsrCollector.dbTables.ModelLogicalDevice", "ModelLdFkeyNavigation")
                        .WithMany("ModelProfile")
                        .HasForeignKey("ModelLdFkey")
                        .HasConstraintName("model_profile_Model_ld_fkey_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("snsrCollector.dbTables.ProfileType", "ProfileTypeNavigation")
                        .WithMany("ModelProfile")
                        .HasForeignKey("ProfileType")
                        .HasConstraintName("model_profile_Profile_type_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("snsrCollector.dbTables.Network", b =>
                {
                    b.HasOne("snsrCollector.dbTables.Device", "ChildDevice")
                        .WithMany("NetworkChildDevice")
                        .HasForeignKey("ChildDeviceId")
                        .HasConstraintName("network_Right_device_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("snsrCollector.dbTables.Device", "ParentDevice")
                        .WithMany("NetworkParentDevice")
                        .HasForeignKey("ParentDeviceId")
                        .HasConstraintName("network_Left_device_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("snsrCollector.dbTables.ObjectDict", b =>
                {
                    b.HasOne("snsrCollector.dbTables.ObjectTypeDict", "ObjectTypeNavigation")
                        .WithMany("ObjectDict")
                        .HasForeignKey("ObjectType")
                        .HasConstraintName("object_dict_Object_type_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("snsrCollector.dbTables.ProfileNetwork", b =>
                {
                    b.HasOne("snsrCollector.dbTables.DeviceProfile", "ChildProfile")
                        .WithMany("ProfileNetworkChildProfile")
                        .HasForeignKey("ChildProfileId")
                        .HasConstraintName("right_profile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("snsrCollector.dbTables.DeviceProfile", "ParentProfile")
                        .WithMany("ProfileNetworkParentProfile")
                        .HasForeignKey("ParentProfileId")
                        .HasConstraintName("left_profile")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
